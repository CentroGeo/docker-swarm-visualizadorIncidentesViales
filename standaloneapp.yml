version: '3.3'

services:

  visualizador:
    image: centrogeo/visualizadorincidentesviales:v0.9.1.3
    # The labels section is where you specify configuration values for Traefik.
    # Docker labels donâ€™t do anything by themselves, but Traefik reads these so
    # it knows how to treat containers.
    ports:
      - 3838
    networks:
      - traefik-public
      - sp-net
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      # placement:
      #   constraints:
      #     - node.role==manager
      labels:
          - traefik.enable=true # enable traefik
          - traefik.docker.network=traefik-public # put it in the same network as traefik
          - traefik.constraint-label=traefik-public # assign the same label as traefik so it can be discovered
          - traefik.http.routers.visualizador.rule=Host(`${APP_DOMAIN?Variable not set}`) # listen to port 80 for request to APP_DOMAIN (use together with the line below)
          - traefik.http.routers.visualizador.entrypoints=http
          - traefik.http.middlewares.visualizador.redirectscheme.scheme=https # redirect traffic to https
          - traefik.http.middlewares.visualizador.redirectscheme.permanent=true # redirect traffic to https
          - traefik.http.routers.visualizador-secured.rule=Host(`${APP_DOMAIN?Variable not set}`) # listen to port 443 for request to APP_DOMAIN (use together with the line below)
          - traefik.http.routers.visualizador-secured.entrypoints=https
          - traefik.http.routers.visualizador-secured.tls.certresolver=le # use the Let's Encrypt certificate we set up earlier
          - traefik.http.services.visualizador-secured.loadbalancer.server.port=3838 # ask Traefik to search for port 3838 of the visualizador app service container
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /efs/cache:/cache_dir

networks:
  traefik-public:
    external: true
  sp-net:
    external: true